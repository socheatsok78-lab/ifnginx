geoip2 GeoIP2/GeoLite2-City.mmdb {
    $geoip2_data_city_name   city names en;
}

geoip2 GeoIP2/GeoLite2-Country.mmdb {
    $geoip2_data_continent_code   continent code;
    $geoip2_data_country_iso_code country iso_code;
}

map $remote_addr $proxy_forwarded_elem {

    # IPv4 addresses can be sent as-is
    ~^[0-9.]+$        "for=$remote_addr";

    # IPv6 addresses need to be bracketed and quoted
    ~^[0-9A-Fa-f:.]+$ "for=\"[$remote_addr]\"";

    # Unix domain socket names cannot be represented in RFC 7239 syntax
    default           "for=unknown";
}

map $http_forwarded $proxy_add_forwarded {

    # If the incoming Forwarded header is syntactically valid, append to it
    "~^(,[ \\t]*)*([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?(;([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?)*([ \\t]*,([ \\t]*([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?(;([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?)*)?)*$" "$http_forwarded, $proxy_forwarded_elem";

    # Otherwise, replace it
    default "$proxy_forwarded_elem";
}

server {
    listen       80;
    server_name  localhost;
    root   /usr/share/nginx/html;
    index  index.html index.htm;

    access_log  off;

    sub_filter_once off;
    sub_filter_types text/plain application/javascript application/json;
    sub_filter '{{server_name}}' '$server_name';
    sub_filter '{{remote_addr}}' '$remote_addr';
    sub_filter '{{geoip2_data_country_iso_code}}' '$geoip2_data_country_iso_code';
    sub_filter '{{remote_port}}' '$remote_port';
    sub_filter '{{http_user_agent}}' '$http_user_agent';
    sub_filter '{{http_accept_language}}' '$http_accept_language';
    sub_filter '{{http_referer}}' '$http_referer';
    sub_filter '{{request_method}}' '$request_method';
    sub_filter '{{http_accept_encoding}}' '$http_accept_encoding';
    sub_filter '{{http_accept}}' '$http_accept';
    sub_filter '{{proxy_add_forwarded}}' '$proxy_add_forwarded';
    sub_filter '{{proxy_add_x_forwarded_for}}' '$proxy_add_x_forwarded_for';

    location / {
        if ($http_user_agent ~* "curl") {
            add_header Content-Type text/plain;
            return 200 '$remote_addr';
        }
        try_files $uri $uri/ =404;
    }

    location /all {
        default_type text/plain;
        try_files $uri $uri/ =404;
    }

    location /ip {
        default_type text/plain;
        return 200 '$remote_addr';
    }

    location /host {
        default_type text/plain;
        return 200 '$remote_addr';
    }

    location /country_code {
        default_type text/plain;
        return 200 '$geoip2_data_country_iso_code';
    }

    location /ua {
        default_type text/plain;
        return 200 '$http_user_agent';
    }

    location /port {
        default_type text/plain;
        return 200 '$remote_port';
    }

    location /lang {
        default_type text/plain;
        return 200 '$http_accept_language';
    }

    location /encoding {
        default_type text/plain;
        return 200 '$http_accept_encoding';
    }

    location /mime {
        default_type text/plain;
        return 200 '$http_accept';
    }

    location /forwarded {
        default_type text/plain;
        return 200 '$remote_addr';
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }
}
